using System.Collections.Generic;
using System.Diagnostics;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Media;
using Cush.Common.FileHandling;

namespace Cush.WPF.Controls.Helpers
{
    [DebuggerStepThrough]
    internal class MRUMenuHelper
    {
        private readonly MRUTextHelper _textHelper;

        internal MRUMenuHelper(MRUTextHelper textHelper)
        {
            _textHelper = textHelper;
        }

        internal static MRUMenuHelper GetInstance()
        {
            return new MRUMenuHelper(MRUTextHelper.GetInstance());
        }


        internal MRUEntry GetItemFromSelectionEvent(SelectionChangedEventArgs e)
        {
            MRUEntry item = null;

            if (e.AddedItems.Count != 0)
            {
                item = (MRUEntry) e.AddedItems[0];
            }

            if (null == item)
            {
                if (e.RemovedItems.Count != 0)
                    item = (MRUEntry) e.RemovedItems[0];
            }

            return item;
        }

        internal void ShortenListEntries(Control menu, IReadOnlyCollection<MRUEntry> fileList,
            string partName)
        {
            if (fileList.Count == 0) return;

            // use the styled settings as the default, in case everything else fails:
            //   boxwidth is 54 pixels smaller than the control.
            var boxWidth = menu.RenderSize.Width - 54;
            var fontSize = 9.0;
            var fontFamily = new FontFamily("SegoeUI");
            var fontStyle = FontStyles.Normal;
            var fontWeight = FontWeights.Normal;
            var fontStretch = FontStretches.Normal;

            // Find the listbox that is generated by the ControlTemplate of the Button
            var myListBox = (ListBox) menu.Template.FindName(partName, menu);

            if (null != myListBox)
            {
                // Need to navigate down the visual tree because the CurrentItem may be null.

                if (myListBox.HasItems)
                {
                    var item = myListBox.Items[0];
                    var container = (myListBox.ItemContainerGenerator.ContainerFromItem(item));

                    var myListBoxItem = (ListBoxItem) container;

                    if (myListBoxItem != null)
                    {
                        // Getting the ContentPresenter of myListBoxItem
                        var myContentPresenter = TreeHelper.FindVisualChild<ContentPresenter>(myListBoxItem);

                        if (myContentPresenter != null)
                        {
                            // Finding textBlock from the DataTemplate that is set on that ContentPresenter
                            var myDataTemplate = myContentPresenter.ContentTemplate;
                            var myTextBlock = (TextBlock) myDataTemplate.FindName("PART_Path", myContentPresenter);

                            // Find the attributes of the textblock
                            boxWidth = myTextBlock.RenderSize.Width;
                            fontSize = myTextBlock.FontSize;
                            fontFamily = myTextBlock.FontFamily;
                            fontStyle = myTextBlock.FontStyle;
                            fontWeight = myTextBlock.FontWeight;
                            fontStretch = myTextBlock.FontStretch;
                        }
                        //else
                        //{
                        //    Trace.WriteLine("  ** " + partName + " has ListBoxItem, but can't get ContentPresenter.");
                        //}
                    }
                    else
                    {
                        Trace.WriteLine("  ** " + partName + " has Items, but can't get ListBoxItem.");
                        Trace.WriteLine(item.GetType());
                    }
                }
                else
                {
                    Trace.WriteLine("  ** ListBox (" + partName + ") has no items.");
                }
            }
            else
            {
                Trace.WriteLine("** myListBox is null.");
            }


            // get string sizes.
            foreach (var item in fileList)
            {
                item.ShortPath = _textHelper.ShortenPath(
                    item.Location, fontFamily, fontStyle, fontWeight, fontStretch, fontSize, boxWidth);
            }
        }
    }
}