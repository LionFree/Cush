using System;
using Cush.Testing.RandomObjects;
using Microsoft.Win32;

namespace Cush.Testing
{
    /// <summary>
    ///     Convenience class for generating new random objects of various types, given a previous value.
    /// </summary>
    public static class NewRandom
    {
        [ThreadStatic]
        private static readonly NewRandomObjectGenerator Rand;

        static NewRandom()
        {
            Rand = NewRandomObjectGenerator.GetInstance();
        }

        /// <summary>
        ///     Returns a
        ///     new random <see cref="T:System.Exception" />,
        ///     generated by the <seealso cref="M:Cush.Testing.RandomObjectGenerator" />,
        ///     but different from <paramref name="oldException" />.
        /// </summary>
        /// <returns>
        ///     A
        ///     new random <see cref="T:System.Exception" />,
        ///     generated by the <seealso cref="M:Cush.Testing.RandomObjectGenerator" />,
        ///     but different from <paramref name="oldException" />.
        /// </returns>
        public static Exception Exception(Exception oldException)
        {
            return Rand.NewRandomException(oldException);
        }

        /// <summary>
        ///     Returns a
        ///     new random <see cref="T:Microsoft.Win32.RegistryKey" />,
        ///     generated by the <seealso cref="M:Cush.Testing.RandomObjectGenerator" />,
        ///     but different from <paramref name="oldRegistryKey" />.
        /// </summary>
        /// <returns>
        ///     A
        ///     new random <see cref="T:Microsoft.Win32.RegistryKey" />,
        ///     generated by the <seealso cref="M:Cush.Testing.RandomObjectGenerator" />,
        ///     but different from <paramref name="oldRegistryKey" />.
        /// </returns>
        public static RegistryKey RegistryKey(RegistryKey oldRegistryKey)
        {
            return Rand.NewRandomRegistryKey(oldRegistryKey);
        }

        /// <summary>
        ///     Returns a new random
        ///     unsigned 8-bit integer
        ///     greater than or equal to 0,
        ///     strictly less than 256,
        ///     and different from <paramref name="oldValue" />.
        /// </summary>
        /// <returns>
        ///     A new random
        ///     unsigned 8-bit integer
        ///     greater than or equal to 0,
        ///     strictly less than 256,
        ///     and different from <paramref name="oldValue" />.
        /// </returns>
        public static byte Byte(byte oldValue)
        {
            return Byte(oldValue, byte.MaxValue);
        }

        /// <summary>
        ///     Returns a new random
        ///     unsigned 8-bit integer
        ///     greater than or equal to 0,
        ///     strictly less than <paramref name="maxValue" />,
        ///     and different from <paramref name="oldValue" />.
        /// </summary>
        /// <returns>
        ///     A new random
        ///     unsigned 8-bit integer
        ///     greater than or equal to 0,
        ///     strictly less than <paramref name="maxValue" />,
        ///     and different from <paramref name="oldValue" />.
        /// </returns>
        public static byte Byte(byte oldValue, byte maxValue)
        {
            return Byte(oldValue, 0, maxValue);
        }

        /// <summary>
        ///     Returns a new random
        ///     unsigned 8-bit integer
        ///     greater than or equal to <paramref name="minValue" />,
        ///     strictly less than <paramref name="maxValue" />,
        ///     and different from <paramref name="oldValue" />.
        /// </summary>
        /// <returns>
        ///     A new random
        ///     unsigned 8-bit integer
        ///     greater than or equal to <paramref name="minValue" />,
        ///     strictly less than <paramref name="maxValue" />,
        ///     and different from <paramref name="oldValue" />.
        /// </returns>
        public static byte Byte(byte oldValue, byte minValue, byte maxValue)
        {
            return Rand.NewRandomByte(oldValue, minValue, maxValue);
        }

        /// <summary>
        ///     Returns a
        ///     new random 128-bit decimal number
        ///     greater than or equal to 0,
        ///     strictly less than <see cref="P:decimal.MaxValue" />,
        ///     and different from <paramref name="oldValue" />.
        /// </summary>
        /// <returns>
        ///     A
        ///     new random 128-bit decimal number
        ///     greater than or equal to 0,
        ///     strictly less than <see cref="P:decimal.MaxValue" />,
        ///     and different from <paramref name="oldValue" />.
        /// </returns>
        public static decimal Decimal(decimal oldValue)
        {
            return Decimal(oldValue, decimal.MaxValue);
        }

        /// <summary>
        ///     Returns a
        ///     new random 128-bit decimal number
        ///     greater than or equal to 0,
        ///     strictly less than <paramref name="maxValue" />,
        ///     and different from <paramref name="oldValue" />.
        /// </summary>
        /// <returns>
        ///     A
        ///     new random 128-bit decimal number
        ///     greater than or equal to 0,
        ///     strictly less than <paramref name="maxValue" />,
        ///     and different from <paramref name="oldValue" />.
        /// </returns>
        public static decimal Decimal(decimal oldValue, decimal maxValue)
        {
            return Decimal(oldValue, 0, maxValue);
        }

        /// <summary>
        ///     Returns a
        ///     new random 128-bit decimal number
        ///     greater than or equal to <paramref name="minValue" />,
        ///     strictly less than <paramref name="maxValue" />,
        ///     and different from <paramref name="oldValue" />.
        /// </summary>
        /// <returns>
        ///     A
        ///     new random 128-bit decimal number
        ///     greater than or equal to <paramref name="minValue" />,
        ///     strictly less than <paramref name="maxValue" />,
        ///     and different from <paramref name="oldValue" />.
        /// </returns>
        public static decimal Decimal(decimal oldValue, decimal minValue, decimal maxValue)
        {
            return Decimal(oldValue, minValue, maxValue, Scale.Flat);
        }

        /// <summary>
        ///     Returns a
        ///     new random 128-bit decimal number
        ///     greater than or equal to <paramref name="minValue" />,
        ///     strictly less than <paramref name="maxValue" />,
        ///     and different from <paramref name="oldValue" />,
        ///     using the given <see cref="T:Scale" />.
        /// </summary>
        /// <returns>
        ///     A
        ///     new random 128-bit decimal number
        ///     greater than or equal to <paramref name="minValue" />,
        ///     strictly less than <paramref name="maxValue" />,
        ///     and different from <paramref name="oldValue" />,
        ///     using the given <see cref="T:Scale" />.
        /// </returns>
        public static decimal Decimal(decimal oldValue, decimal minValue, decimal maxValue, Scale scale)
        {
            return Rand.NewRandomDecimal(oldValue, minValue, maxValue, scale);
        }

        /// <summary>
        ///     Returns a new random
        ///     64-bit floating-point number
        ///     greater than or equal to 0,
        ///     strictly less than <see cref="P:double.MaxValue" />,
        ///     and different from <paramref name="oldValue" />.
        /// </summary>
        /// <returns>
        ///     A new random
        ///     64-bit floating-point number
        ///     greater than or equal to 0,
        ///     strictly less than <see cref="P:double.MaxValue" />,
        ///     and different from <paramref name="oldValue" />.
        /// </returns>
        public static double Double(double oldValue)
        {
            return Double(oldValue, double.MaxValue);
        }

        /// <summary>
        ///     Returns a new random
        ///     64-bit floating-point number
        ///     greater than or equal to 0,
        ///     strictly less than <paramref name="maxValue" />,
        ///     and different from <paramref name="oldValue" />.
        /// </summary>
        /// <returns>
        ///     A new random
        ///     64-bit floating-point number
        ///     greater than or equal to 0,
        ///     strictly less than <paramref name="maxValue" />,
        ///     and different from <paramref name="oldValue" />.
        /// </returns>
        public static double Double(double oldValue, double maxValue)
        {
            return Double(oldValue, 0, maxValue);
        }

        /// <summary>
        ///     Returns a new random
        ///     64-bit floating-point number
        ///     greater than or equal to <paramref name="minValue" />,
        ///     strictly less than <paramref name="maxValue" />,
        ///     and different from <paramref name="oldValue" />.
        /// </summary>
        /// <returns>
        ///     A new random
        ///     64-bit floating-point number
        ///     greater than or equal to <paramref name="minValue" />,
        ///     strictly less than <paramref name="maxValue" />,
        ///     and different from <paramref name="oldValue" />.
        /// </returns>
        public static double Double(double oldValue, double minValue, double maxValue)
        {
            return Double(oldValue, minValue, maxValue, Scale.Flat);
        }

        /// <summary>
        ///     Returns a
        ///     new random 64-bit floating-point number
        ///     greater than or equal to <paramref name="minValue" />,
        ///     strictly less than <paramref name="maxValue" />,
        ///     and different from <paramref name="oldValue" />,
        ///     using the given <see cref="T:Scale" />.
        /// </summary>
        /// <returns>
        ///     A
        ///     A 64-bit floating-point number
        ///     new random 64-bit floating-point number
        ///     greater than or equal to <paramref name="minValue" />,
        ///     strictly less than <paramref name="maxValue" />,
        ///     and different from <paramref name="oldValue" />,
        ///     using the given <see cref="T:Scale" />.
        /// </returns>
        public static double Double(double oldValue, double minValue, double maxValue, Scale scale)
        {
            return Rand.NewRandomDouble(oldValue, minValue, maxValue, scale);
        }

        /// <summary>
        ///     Returns a new random
        ///     32-bit floating-point number
        ///     greater than or equal to 0,
        ///     strictly less than <see cref="T:float.MaxValue" />,
        ///     and different from <paramref name="oldValue" />.
        /// </summary>
        /// <returns>
        ///     A new random
        ///     32-bit floating-point number
        ///     greater than or equal to 0,
        ///     strictly less than <see cref="T:float.MaxValue" />,
        ///     and different from <paramref name="oldValue" />.
        /// </returns>
        public static float Float(float oldValue)
        {
            return Float(oldValue, float.MaxValue);
        }

        /// <summary>
        ///     Returns a new random
        ///     32-bit floating-point number
        ///     greater than or equal to 0,
        ///     strictly less than <paramref name="maxValue" />,
        ///     and different from <paramref name="oldValue" />.
        /// </summary>
        /// <returns>
        ///     A new random
        ///     32-bit floating-point number
        ///     greater than or equal to 0,
        ///     strictly less than <paramref name="maxValue" />,
        ///     and different from <paramref name="oldValue" />.
        /// </returns>
        public static float Float(float oldValue, float maxValue)
        {
            return Float(oldValue,0, maxValue);
        }

        /// <summary>
        ///     Returns a new random
        ///     32-bit floating-point number
        ///     greater than or equal to <paramref name="minValue" />,
        ///     strictly less than <paramref name="maxValue" />,
        ///     and different from <paramref name="oldValue" />.
        /// </summary>
        /// <returns>
        ///     A new random
        ///     32-bit floating-point number
        ///     greater than or equal to <paramref name="minValue" />,
        ///     strictly less than <paramref name="maxValue" />,
        ///     and different from <paramref name="oldValue" />.
        /// </returns>
        public static float Float(float oldValue, float minValue, float maxValue)
        {
            return Float(oldValue, minValue, maxValue, Scale.Flat);
        }

        /// <summary>
        ///     Returns a new random
        ///     32-bit floating-point number
        ///     greater than or equal to <paramref name="minValue" />,
        ///     strictly less than <paramref name="maxValue" />,
        ///     and different from <paramref name="oldValue" />,
        ///     using the given <see cref="T:Scale" />.
        /// </summary>
        /// <returns>
        ///     A
        ///     32-bit floating-point number
        ///     greater than or equal to <paramref name="minValue" />,
        ///     strictly less than <paramref name="maxValue" />,
        ///     and different from <paramref name="oldValue" />,
        ///     using the given <see cref="T:Scale" />.
        /// </returns>
        public static float Float(float oldValue, float minValue, float maxValue, Scale scale)
        {
            return Rand.NewRandomFloat(oldValue, minValue, maxValue, scale);
        }

        /// <summary>
        ///     Returns a new random
        ///     32-bit floating-point number
        ///     greater than or equal to 0,
        ///     strictly less than <see cref="T:float.MaxValue" />,
        ///     and different from <paramref name="oldValue" />.
        /// </summary>
        /// <returns>
        ///     A new random
        ///     32-bit floating-point number
        ///     greater than or equal to 0,
        ///     strictly less than <see cref="T:float.MaxValue" />,
        ///     and different from <paramref name="oldValue" />.
        /// </returns>
        public static float Single(float oldValue)
        {
            return Single(oldValue, float.MaxValue);
        }

        /// <summary>
        ///     Returns a new random
        ///     32-bit floating-point number
        ///     greater than or equal to 0,
        ///     strictly less than <paramref name="maxValue" />,
        ///     and different from <paramref name="oldValue" />.
        /// </summary>
        /// <returns>
        ///     A new random
        ///     32-bit floating-point number
        ///     greater than or equal to 0,
        ///     strictly less than <paramref name="maxValue" />,
        ///     and different from <paramref name="oldValue" />.
        /// </returns>
        public static float Single(float oldValue, float maxValue)
        {
            return Single(oldValue, 0, maxValue);
        }

        /// <summary>
        ///     Returns a new random
        ///     32-bit floating-point number
        ///     greater than or equal to <paramref name="minValue" />,
        ///     strictly less than <paramref name="maxValue" />,
        ///     and different from <paramref name="oldValue" />.
        /// </summary>
        /// <returns>
        ///     A new random
        ///     32-bit floating-point number
        ///     greater than or equal to <paramref name="minValue" />,
        ///     strictly less than <paramref name="maxValue" />,
        ///     and different from <paramref name="oldValue" />.
        /// </returns>
        public static float Single(float oldValue, float minValue, float maxValue)
        {
            return Single(oldValue, minValue, maxValue, Scale.Flat);
        }

        /// <summary>
        ///     Returns a new random
        ///     32-bit floating-point number
        ///     greater than or equal to <paramref name="minValue" />,
        ///     strictly less than <paramref name="maxValue" />,
        ///     and different from <paramref name="oldValue" />,
        ///     using the given <see cref="T:Scale" />.
        /// </summary>
        /// <returns>
        ///     A
        ///     32-bit floating-point number
        ///     greater than or equal to <paramref name="minValue" />,
        ///     strictly less than <paramref name="maxValue" />,
        ///     and different from <paramref name="oldValue" />,
        ///     using the given <see cref="T:Scale" />.
        /// </returns>
        public static float Single(float oldValue, float minValue, float maxValue, Scale scale)
        {
            return Float(oldValue, minValue, maxValue, scale);
        }

        /// <summary>
        ///     Returns a new random
        ///     32-bit signed integer
        ///     greater than or equal to 0,
        ///     strictly less than <see cref="T:Int32.MaxValue" />,
        ///     and different from <paramref name="oldValue" />.
        /// </summary>
        /// <returns>
        ///     A new random
        ///     32-bit signed integer
        ///     greater than or equal to 0,
        ///     strictly less than <see cref="T:Int32.MaxValue" />,
        ///     and different from <paramref name="oldValue" />.
        /// </returns>
        public static int Int(int oldValue)
        {
            return Int(oldValue, int.MaxValue);
        }

        /// <summary>
        ///     Returns a new random
        ///     32-bit signed integer
        ///     greater than or equal to 0,
        ///     strictly less than <paramref name="maxValue" />,
        ///     and different from <paramref name="oldValue" />.
        /// </summary>
        /// <returns>
        ///     A new random
        ///     32-bit signed integer
        ///     greater than or equal to 0,
        ///     strictly less than <paramref name="maxValue" />,
        ///     and different from <paramref name="oldValue" />.
        /// </returns>
        public static int Int(int oldValue, int maxValue)
        {
            return Int(oldValue, 0, maxValue);
        }

        /// <summary>
        ///     Returns a new random
        ///     32-bit signed integer
        ///     greater than or equal to <paramref name="minValue" />,
        ///     strictly less than <paramref name="maxValue" />,
        ///     and different from <paramref name="oldValue" />.
        /// </summary>
        /// <returns>
        ///     A new random
        ///     32-bit signed integer
        ///     greater than or equal to <paramref name="minValue" />,
        ///     strictly less than <paramref name="maxValue" />,
        ///     and different from <paramref name="oldValue" />.
        /// </returns>
        public static int Int(int oldValue, int minValue, int maxValue)
        {
            return Int(oldValue, minValue, maxValue, Scale.Flat);
        }

        /// <summary>
        ///     Returns a new random
        ///     32-bit signed integer
        ///     greater than or equal to <paramref name="minValue" />,
        ///     strictly less than <paramref name="maxValue" />,
        ///     and different from <paramref name="oldValue" />,
        ///     using the given <see cref="T:Scale" />.
        /// </summary>
        /// <returns>
        ///     A
        ///     32-bit signed integer
        ///     greater than or equal to <paramref name="minValue" />,
        ///     strictly less than <paramref name="maxValue" />,
        ///     and different from <paramref name="oldValue" />,
        ///     using the given <see cref="T:Scale" />.
        /// </returns>
        public static int Int(int oldValue, int minValue, int maxValue, Scale scale)
        {
            return Rand.NewRandomInt(oldValue, minValue, maxValue, scale);
        }

        /// <summary>
        ///     Returns a new random
        ///     32-bit signed integer
        ///     greater than or equal to 0,
        ///     strictly less than <see cref="T:Int32.MaxValue" />,
        ///     and different from <paramref name="oldValue" />.
        /// </summary>
        /// <returns>
        ///     A new random
        ///     32-bit signed integer
        ///     greater than or equal to 0,
        ///     strictly less than <see cref="T:Int32.MaxValue" />,
        ///     and different from <paramref name="oldValue" />.
        /// </returns>
        public static int Int32(int oldValue)
        {
            return Int32(oldValue, int.MaxValue);
        }

        /// <summary>
        ///     Returns a new random
        ///     32-bit signed integer
        ///     greater than or equal to 0,
        ///     strictly less than <paramref name="maxValue" />,
        ///     and different from <paramref name="oldValue" />.
        /// </summary>
        /// <returns>
        ///     A new random
        ///     32-bit signed integer
        ///     greater than or equal to 0,
        ///     strictly less than <paramref name="maxValue" />,
        ///     and different from <paramref name="oldValue" />.
        /// </returns>
        public static int Int32(int oldValue, int maxValue)
        {
            return Int32(oldValue, 0, maxValue);
        }

        /// <summary>
        ///     Returns a new random
        ///     32-bit signed integer
        ///     greater than or equal to <paramref name="minValue" />,
        ///     strictly less than <paramref name="maxValue" />,
        ///     and different from <paramref name="oldValue" />.
        /// </summary>
        /// <returns>
        ///     A new random
        ///     32-bit signed integer
        ///     greater than or equal to <paramref name="minValue" />,
        ///     strictly less than <paramref name="maxValue" />,
        ///     and different from <paramref name="oldValue" />.
        /// </returns>
        public static int Int32(int oldValue, int minValue, int maxValue)
        {
            return Int32(oldValue, minValue, maxValue, Scale.Flat);
        }

        /// <summary>
        ///     Returns a new random
        ///     32-bit signed integer
        ///     greater than or equal to <paramref name="minValue" />,
        ///     strictly less than <paramref name="maxValue" />,
        ///     and different from <paramref name="oldValue" />,
        ///     using the given <see cref="T:Scale" />.
        /// </summary>
        /// <returns>
        ///     A
        ///     32-bit signed integer
        ///     greater than or equal to <paramref name="minValue" />,
        ///     strictly less than <paramref name="maxValue" />,
        ///     and different from <paramref name="oldValue" />,
        ///     using the given <see cref="T:Scale" />.
        /// </returns>
        public static int Int32(int oldValue, int minValue, int maxValue, Scale scale)
        {
            return Int(oldValue, minValue, maxValue, scale);
        }

        /// <summary>
        ///     Returns a new random
        ///     64-bit signed integer
        ///     greater than or equal to 0,
        ///     strictly less than <see cref="T:Long.MaxValue" />,
        ///     and different from <paramref name="oldValue" />.
        /// </summary>
        /// <returns>
        ///     A new random
        ///     64-bit signed integer
        ///     greater than or equal to 0,
        ///     strictly less than <see cref="T:Long.MaxValue" />,
        ///     and different from <paramref name="oldValue" />.
        /// </returns>
        public static long Long(long oldValue)
        {
            return Long(oldValue, long.MaxValue);
        }

        /// <summary>
        ///     Returns a new random
        ///     64-bit signed integer
        ///     greater than or equal to 0,
        ///     strictly less than <paramref name="maxValue" />,
        ///     and different from <paramref name="oldValue" />.
        /// </summary>
        /// <returns>
        ///     A new random
        ///     64-bit signed integer
        ///     greater than or equal to 0,
        ///     strictly less than <paramref name="maxValue" />,
        ///     and different from <paramref name="oldValue" />.
        /// </returns>
        public static long Long(long oldValue, long maxValue)
        {
            return Long(oldValue, 0, maxValue);
        }

        /// <summary>
        ///     Returns a new random
        ///     64-bit signed integer
        ///     greater than or equal to <paramref name="minValue" />,
        ///     strictly less than <paramref name="maxValue" />,
        ///     and different from <paramref name="oldValue" />.
        /// </summary>
        /// <returns>
        ///     A new random
        ///     64-bit signed integer
        ///     greater than or equal to <paramref name="minValue" />,
        ///     strictly less than <paramref name="maxValue" />,
        ///     and different from <paramref name="oldValue" />.
        /// </returns>
        public static long Long(long oldValue, long minValue, long maxValue)
        {
            return Long(oldValue, minValue, maxValue, Scale.Flat);
        }

        /// <summary>
        ///     Returns a new random
        ///     64-bit signed integer
        ///     greater than or equal to <paramref name="minValue" />,
        ///     strictly less than <paramref name="maxValue" />,
        ///     and different from <paramref name="oldValue" />,
        ///     using the given <see cref="T:Scale" />.
        /// </summary>
        /// <returns>
        ///     A
        ///     64-bit signed integer
        ///     greater than or equal to <paramref name="minValue" />,
        ///     strictly less than <paramref name="maxValue" />,
        ///     and different from <paramref name="oldValue" />,
        ///     using the given <see cref="T:Scale" />.
        /// </returns>
        public static long Long(long oldValue, long minValue, long maxValue, Scale scale)
        {
            return Rand.NewRandomLong(oldValue, minValue, maxValue, scale);
        }

        /// <summary>
        ///     Returns a new random
        ///     64-bit signed integer
        ///     greater than or equal to 0,
        ///     strictly less than <see cref="T:Long.MaxValue" />,
        ///     and different from <paramref name="oldValue" />.
        /// </summary>
        /// <returns>
        ///     A new random
        ///     64-bit signed integer
        ///     greater than or equal to 0,
        ///     strictly less than <see cref="T:Long.MaxValue" />,
        ///     and different from <paramref name="oldValue" />.
        /// </returns>
        public static long Int64(long oldValue)
        {
            return Int64(oldValue, long.MaxValue);
        }

        /// <summary>
        ///     Returns a new random
        ///     64-bit signed integer
        ///     greater than or equal to 0,
        ///     strictly less than <paramref name="maxValue" />,
        ///     and different from <paramref name="oldValue" />.
        /// </summary>
        /// <returns>
        ///     A new random
        ///     64-bit signed integer
        ///     greater than or equal to 0,
        ///     strictly less than <paramref name="maxValue" />,
        ///     and different from <paramref name="oldValue" />.
        /// </returns>
        public static long Int64(long oldValue, long maxValue)
        {
            return Int64(oldValue, 0, maxValue);
        }

        /// <summary>
        ///     Returns a new random
        ///     64-bit signed integer
        ///     greater than or equal to <paramref name="minValue" />,
        ///     strictly less than <paramref name="maxValue" />,
        ///     and different from <paramref name="oldValue" />.
        /// </summary>
        /// <returns>
        ///     A new random
        ///     64-bit signed integer
        ///     greater than or equal to <paramref name="minValue" />,
        ///     strictly less than <paramref name="maxValue" />,
        ///     and different from <paramref name="oldValue" />.
        /// </returns>
        public static long Int64(long oldValue, long minValue, long maxValue)
        {
            return Int64(oldValue, minValue, maxValue, Scale.Flat);
        }

        /// <summary>
        ///     Returns a new random
        ///     64-bit signed integer
        ///     greater than or equal to <paramref name="minValue" />,
        ///     strictly less than <paramref name="maxValue" />,
        ///     and different from <paramref name="oldValue" />,
        ///     using the given <see cref="T:Scale" />.
        /// </summary>
        /// <returns>
        ///     A
        ///     64-bit signed integer
        ///     greater than or equal to <paramref name="minValue" />,
        ///     strictly less than <paramref name="maxValue" />,
        ///     and different from <paramref name="oldValue" />,
        ///     using the given <see cref="T:Scale" />.
        /// </returns>
        public static long Int64(long oldValue, long minValue, long maxValue, Scale scale)
        {
            return Long(oldValue, minValue, maxValue, scale);
        }

        /// <summary>
        ///     Returns a new random
        ///     8-bit signed integer
        ///     greater than or equal to -128,
        ///     strictly less than 128,
        ///     and different from <paramref name="oldValue" />.
        /// </summary>
        /// <returns>
        ///     A new random
        ///     8-bit signed integer
        ///     greater than or equal to -128,
        ///     strictly less than 128,
        ///     and different from <paramref name="oldValue" />.
        /// </returns>
        public static sbyte Sbyte(sbyte oldValue)
        {
            return Sbyte(oldValue, sbyte.MaxValue);
        }

        /// <summary>
        ///     Returns a new random
        ///     8-bit signed integer
        ///     greater than or equal to 0,
        ///     strictly less than <paramref name="maxValue" />,
        ///     and different from <paramref name="oldValue" />.
        /// </summary>
        /// <returns>
        ///     A new random
        ///     8-bit signed integer
        ///     greater than or equal to 0,
        ///     strictly less than <paramref name="maxValue" />,
        ///     and different from <paramref name="oldValue" />.
        /// </returns>
        public static sbyte Sbyte(sbyte oldValue, sbyte maxValue)
        {
            return Sbyte(oldValue, 0, maxValue);
        }

        /// <summary>
        ///     Returns a new random
        ///     8-bit signed integer
        ///     greater than or equal to <paramref name="minValue" />,
        ///     strictly less than <paramref name="maxValue" />,
        ///     and different from <paramref name="oldValue" />.
        /// </summary>
        /// <returns>
        ///     A new random
        ///     8-bit signed integer
        ///     greater than or equal to <paramref name="minValue" />,
        ///     strictly less than <paramref name="maxValue" />,
        ///     and different from <paramref name="oldValue" />.
        /// </returns>
        public static sbyte Sbyte(sbyte oldValue, sbyte minValue, sbyte maxValue)
        {
            return Rand.NewRandomSByte(oldValue, minValue, maxValue);
        }

        /// <summary>
        ///     Returns a new random
        ///     16-bit signed integer
        ///     greater than or equal to 0,
        ///     strictly less than <see cref="P:short.MaxValue" />,
        ///     and different from <paramref name="oldValue" />.
        /// </summary>
        /// <returns>
        ///     A new random
        ///     16-bit signed integer
        ///     greater than or equal to 0,
        ///     strictly less than <see cref="P:short.MaxValue" />,
        ///     and different from <paramref name="oldValue" />.
        /// </returns>
        public static short Short(short oldValue)
        {
            return Short(oldValue, short.MaxValue);
        }

        /// <summary>
        ///     Returns a new random
        ///     16-bit signed integer
        ///     greater than or equal to 0,
        ///     strictly less than <paramref name="maxValue" />,
        ///     and different from <paramref name="oldValue" />.
        /// </summary>
        /// <returns>
        ///     A new random
        ///     16-bit signed integer
        ///     greater than or equal to 0,
        ///     strictly less than <paramref name="maxValue" />,
        ///     and different from <paramref name="oldValue" />.
        /// </returns>
        public static short Short(short oldValue, short maxValue)
        {
            return Short(oldValue, 0, maxValue);
        }

        /// <summary>
        ///     Returns a new random
        ///     16-bit signed integer
        ///     greater than or equal to <paramref name="minValue" />,
        ///     strictly less than <paramref name="maxValue" />,
        ///     and different from <paramref name="oldValue" />.
        /// </summary>
        /// <returns>
        ///     A new random
        ///     16-bit signed integer
        ///     greater than or equal to <paramref name="minValue" />,
        ///     strictly less than <paramref name="maxValue" />,
        ///     and different from <paramref name="oldValue" />.
        /// </returns>
        public static short Short(short oldValue, short minValue, short maxValue)
        {
            return Short(oldValue, minValue, maxValue, Scale.Flat);
        }

        /// <summary>
        ///     Returns a new random
        ///     16-bit signed integer
        ///     greater than or equal to <paramref name="minValue" />,
        ///     strictly less than <paramref name="maxValue" />,
        ///     and different from <paramref name="oldValue" />,
        ///     using the given <see cref="T:Scale" />.
        /// </summary>
        /// <returns>
        ///     A
        ///     16-bit signed integer
        ///     greater than or equal to <paramref name="minValue" />,
        ///     strictly less than <paramref name="maxValue" />,
        ///     and different from <paramref name="oldValue" />,
        ///     using the given <see cref="T:Scale" />.
        /// </returns>
        public static short Short(short oldValue, short minValue, short maxValue, Scale scale)
        {
            return Rand.NewRandomShort(oldValue, minValue, maxValue, scale);
        }

        /// <summary>
        ///     Returns a new random
        ///     16-bit signed integer
        ///     greater than or equal to 0,
        ///     strictly less than <see cref="P:short.MaxValue" />,
        ///     and different from <paramref name="oldValue" />.
        /// </summary>
        /// <returns>
        ///     A new random
        ///     16-bit signed integer
        ///     greater than or equal to 0,
        ///     strictly less than <see cref="P:short.MaxValue" />,
        ///     and different from <paramref name="oldValue" />.
        /// </returns>
        public static short Int16(short oldValue)
        {
            return Int16(oldValue, short.MaxValue);
        }

        /// <summary>
        ///     Returns a new random
        ///     16-bit signed integer
        ///     greater than or equal to 0,
        ///     strictly less than <paramref name="maxValue" />,
        ///     and different from <paramref name="oldValue" />.
        /// </summary>
        /// <returns>
        ///     A new random
        ///     16-bit signed integer
        ///     greater than or equal to 0,
        ///     strictly less than <paramref name="maxValue" />,
        ///     and different from <paramref name="oldValue" />.
        /// </returns>
        public static short Int16(short oldValue, short maxValue)
        {
            return Int16(oldValue, 0, maxValue);
        }

        /// <summary>
        ///     Returns a new random
        ///     16-bit signed integer
        ///     greater than or equal to <paramref name="minValue" />,
        ///     strictly less than <paramref name="maxValue" />,
        ///     and different from <paramref name="oldValue" />.
        /// </summary>
        /// <returns>
        ///     A new random
        ///     16-bit signed integer
        ///     greater than or equal to <paramref name="minValue" />,
        ///     strictly less than <paramref name="maxValue" />,
        ///     and different from <paramref name="oldValue" />.
        /// </returns>
        public static short Int16(short oldValue, short minValue, short maxValue)
        {
            return Int16(oldValue, minValue, maxValue, Scale.Flat);
        }

        /// <summary>
        ///     Returns a new random
        ///     16-bit signed integer
        ///     greater than or equal to <paramref name="minValue" />,
        ///     strictly less than <paramref name="maxValue" />,
        ///     and different from <paramref name="oldValue" />,
        ///     using the given <see cref="T:Scale" />.
        /// </summary>
        /// <returns>
        ///     A
        ///     16-bit signed integer
        ///     greater than or equal to <paramref name="minValue" />,
        ///     strictly less than <paramref name="maxValue" />,
        ///     and different from <paramref name="oldValue" />,
        ///     using the given <see cref="T:Scale" />.
        /// </returns>
        public static short Int16(short oldValue, short minValue, short maxValue, Scale scale)
        {
            return Short(oldValue, minValue, maxValue, scale);
        }
        
        /// <summary>
        ///     Returns a new random
        ///     unsigned 32-bit integer
        ///     greater than or equal to 0,
        ///     strictly less than <see cref="P:uint.MaxValue" />,
        ///     and different from <paramref name="oldValue" />.
        /// </summary>
        /// <returns>
        ///     A new random
        ///     unsigned 32-bit integer
        ///     greater than or equal to 0,
        ///     strictly less than <see cref="P:uint.MaxValue" />,
        ///     and different from <paramref name="oldValue" />.
        /// </returns>
        public static uint UInt(uint oldValue)
        {
            return UInt(oldValue, uint.MaxValue);
        }

        /// <summary>
        ///     Returns a new random
        ///     unsigned 32-bit integer
        ///     greater than or equal to 0,
        ///     strictly less than <paramref name="maxValue" />,
        ///     and different from <paramref name="oldValue" />.
        /// </summary>
        /// <returns>
        ///     A new random
        ///     unsigned 32-bit integer
        ///     greater than or equal to 0,
        ///     strictly less than <paramref name="maxValue" />,
        ///     and different from <paramref name="oldValue" />.
        /// </returns>
        public static uint UInt(uint oldValue, uint maxValue)
        {
            return UInt(oldValue, 0, maxValue);
        }

        /// <summary>
        ///     Returns a new random
        ///     unsigned 32-bit integer
        ///     greater than or equal to <paramref name="minValue" />,
        ///     strictly less than <paramref name="maxValue" />,
        ///     and different from <paramref name="oldValue" />.
        /// </summary>
        /// <returns>
        ///     A new random
        ///     unsigned 32-bit integer
        ///     greater than or equal to <paramref name="minValue" />,
        ///     strictly less than <paramref name="maxValue" />,
        ///     and different from <paramref name="oldValue" />.
        /// </returns>
        public static uint UInt(uint oldValue, uint minValue, uint maxValue)
        {
            return Rand.NewRandomUInt(oldValue, minValue, maxValue);
        }

        /// <summary>
        ///     Returns a new random
        ///     unsigned 32-bit integer
        ///     greater than or equal to 0,
        ///     strictly less than <see cref="P:uint.MaxValue" />,
        ///     and different from <paramref name="oldValue" />.
        /// </summary>
        /// <returns>
        ///     A new random
        ///     unsigned 32-bit integer
        ///     greater than or equal to 0,
        ///     strictly less than <see cref="P:uint.MaxValue" />,
        ///     and different from <paramref name="oldValue" />.
        /// </returns>
        public static uint UInt32(uint oldValue)
        {
            return UInt32(oldValue, uint.MaxValue);
        }

        /// <summary>
        ///     Returns a new random
        ///     unsigned 32-bit integer
        ///     greater than or equal to 0,
        ///     strictly less than <paramref name="maxValue" />,
        ///     and different from <paramref name="oldValue" />.
        /// </summary>
        /// <returns>
        ///     A new random
        ///     unsigned 32-bit integer
        ///     greater than or equal to 0,
        ///     strictly less than <paramref name="maxValue" />,
        ///     and different from <paramref name="oldValue" />.
        /// </returns>
        public static uint UInt32(uint oldValue, uint maxValue)
        {
            return UInt32(oldValue, 0, maxValue);
        }

        /// <summary>
        ///     Returns a new random
        ///     unsigned 32-bit integer
        ///     greater than or equal to <paramref name="minValue" />,
        ///     strictly less than <paramref name="maxValue" />,
        ///     and different from <paramref name="oldValue" />.
        /// </summary>
        /// <returns>
        ///     A new random
        ///     unsigned 32-bit integer
        ///     greater than or equal to <paramref name="minValue" />,
        ///     strictly less than <paramref name="maxValue" />,
        ///     and different from <paramref name="oldValue" />.
        /// </returns>
        public static uint UInt32(uint oldValue, uint minValue, uint maxValue)
        {
            return UInt(oldValue, minValue, maxValue);
        }
        
        /// <summary>
        ///     Returns a new random
        ///     unsigned 64-bit integer
        ///     greater than or equal to 0,
        ///     strictly less than <see cref="P:ulong.MaxValue" />,
        ///     and different from <paramref name="oldValue" />.
        /// </summary>
        /// <returns>
        ///     A new random
        ///     unsigned 64-bit integer
        ///     greater than or equal to 0,
        ///     strictly less than <see cref="P:ulong.MaxValue" />,
        ///     and different from <paramref name="oldValue" />.
        /// </returns>
        public static ulong ULong(ulong oldValue)
        {
            return ULong(oldValue, ulong.MaxValue);
        }

        /// <summary>
        ///     Returns a new random
        ///     unsigned 64-bit integer
        ///     greater than or equal to 0,
        ///     strictly less than <paramref name="maxValue" />,
        ///     and different from <paramref name="oldValue" />.
        /// </summary>
        /// <returns>
        ///     A new random
        ///     unsigned 64-bit integer
        ///     greater than or equal to 0,
        ///     strictly less than <paramref name="maxValue" />,
        ///     and different from <paramref name="oldValue" />.
        /// </returns>
        public static ulong ULong(ulong oldValue, ulong maxValue)
        {
            return ULong(oldValue, 0, maxValue);
        }

        /// <summary>
        ///     Returns a new random
        ///     unsigned 64-bit integer
        ///     greater than or equal to <paramref name="minValue" />,
        ///     strictly less than <paramref name="maxValue" />,
        ///     and different from <paramref name="oldValue" />.
        /// </summary>
        /// <returns>
        ///     A new random
        ///     unsigned 64-bit integer
        ///     greater than or equal to <paramref name="minValue" />,
        ///     strictly less than <paramref name="maxValue" />,
        ///     and different from <paramref name="oldValue" />.
        /// </returns>
        public static ulong ULong(ulong oldValue, ulong minValue, ulong maxValue)
        {
            return Rand.NewRandomULong(oldValue, minValue, maxValue);
        }

        /// <summary>
        ///     Returns a new random
        ///     unsigned 64-bit integer
        ///     greater than or equal to 0,
        ///     strictly less than <see cref="P:ulong.MaxValue" />,
        ///     and different from <paramref name="oldValue" />.
        /// </summary>
        /// <returns>
        ///     A new random
        ///     unsigned 64-bit integer
        ///     greater than or equal to 0,
        ///     strictly less than <see cref="P:ulong.MaxValue" />,
        ///     and different from <paramref name="oldValue" />.
        /// </returns>
        public static ulong UInt64(ulong oldValue)
        {
            return UInt64(oldValue, long.MaxValue);
        }

        /// <summary>
        ///     Returns a new random
        ///     unsigned 64-bit integer
        ///     greater than or equal to 0,
        ///     strictly less than <paramref name="maxValue" />,
        ///     and different from <paramref name="oldValue" />.
        /// </summary>
        /// <returns>
        ///     A new random
        ///     unsigned 64-bit integer
        ///     greater than or equal to 0,
        ///     strictly less than <paramref name="maxValue" />,
        ///     and different from <paramref name="oldValue" />.
        /// </returns>
        public static ulong UInt64(ulong oldValue, ulong maxValue)
        {
            return UInt64(oldValue, 0, maxValue);
        }

        /// <summary>
        ///     Returns a new random
        ///     unsigned 64-bit integer
        ///     greater than or equal to <paramref name="minValue" />,
        ///     strictly less than <paramref name="maxValue" />,
        ///     and different from <paramref name="oldValue" />.
        /// </summary>
        /// <returns>
        ///     A new random
        ///     unsigned 64-bit integer
        ///     greater than or equal to <paramref name="minValue" />,
        ///     strictly less than <paramref name="maxValue" />,
        ///     and different from <paramref name="oldValue" />.
        /// </returns>
        public static ulong UInt64(ulong oldValue, ulong minValue, ulong maxValue)
        {
            return ULong(oldValue, minValue, maxValue);
        }

        /// <summary>
        ///     Returns a new random
        ///     unsigned 16-bit integer
        ///     greater than or equal to 0,
        ///     strictly less than <see cref="P:ushort.MaxValue" />,
        ///     and different from <paramref name="oldValue" />.
        /// </summary>
        /// <returns>
        ///     A new random
        ///     unsigned 16-bit integer
        ///     greater than or equal to 0,
        ///     strictly less than <see cref="P:ushort.MaxValue" />,
        ///     and different from <paramref name="oldValue" />.
        /// </returns>
        public static ushort UShort(ushort oldValue)
        {
            return UShort(oldValue, ushort.MaxValue);
        }

        /// <summary>
        ///     Returns a new random
        ///     unsigned 16-bit integer
        ///     greater than or equal to 0,
        ///     strictly less than <paramref name="maxValue" />,
        ///     and different from <paramref name="oldValue" />.
        /// </summary>
        /// <returns>
        ///     A new random
        ///     unsigned 16-bit integer
        ///     greater than or equal to 0,
        ///     strictly less than <paramref name="maxValue" />,
        ///     and different from <paramref name="oldValue" />.
        /// </returns>
        public static ushort UShort(ushort oldValue, ushort maxValue)
        {
            return UShort(oldValue, 0, maxValue);
        }

        /// <summary>
        ///     Returns a new random
        ///     unsigned 16-bit integer
        ///     greater than or equal to <paramref name="minValue" />,
        ///     strictly less than <paramref name="maxValue" />,
        ///     and different from <paramref name="oldValue" />.
        /// </summary>
        /// <returns>
        ///     A new random
        ///     unsigned 16-bit integer
        ///     greater than or equal to <paramref name="minValue" />,
        ///     strictly less than <paramref name="maxValue" />,
        ///     and different from <paramref name="oldValue" />.
        /// </returns>
        public static ushort UShort(ushort oldValue, ushort minValue, ushort maxValue)
        {
            return Rand.NewRandomUShort(oldValue, minValue, maxValue);
        }

        /// <summary>
        ///     Returns a new random
        ///     unsigned 16-bit integer
        ///     greater than or equal to 0,
        ///     strictly less than <see cref="P:ushort.MaxValue" />,
        ///     and different from <paramref name="oldValue" />.
        /// </summary>
        /// <returns>
        ///     A new random
        ///     unsigned 16-bit integer
        ///     greater than or equal to 0,
        ///     strictly less than <see cref="P:ushort.MaxValue" />,
        ///     and different from <paramref name="oldValue" />.
        /// </returns>
        public static ushort UInt16(ushort oldValue)
        {
            return UInt16(oldValue, ushort.MaxValue);
        }

        /// <summary>
        ///     Returns a new random
        ///     unsigned 16-bit integer
        ///     greater than or equal to 0,
        ///     strictly less than <paramref name="maxValue" />,
        ///     and different from <paramref name="oldValue" />.
        /// </summary>
        /// <returns>
        ///     A new random
        ///     unsigned 16-bit integer
        ///     greater than or equal to 0,
        ///     strictly less than <paramref name="maxValue" />,
        ///     and different from <paramref name="oldValue" />.
        /// </returns>
        public static ushort UInt16(ushort oldValue, ushort maxValue)
        {
            return UInt16(oldValue, 0, maxValue);
        }

        /// <summary>
        ///     Returns a new random
        ///     unsigned 16-bit integer
        ///     greater than or equal to <paramref name="minValue" />,
        ///     strictly less than <paramref name="maxValue" />,
        ///     and different from <paramref name="oldValue" />.
        /// </summary>
        /// <returns>
        ///     A new random
        ///     unsigned 16-bit integer
        ///     greater than or equal to <paramref name="minValue" />,
        ///     strictly less than <paramref name="maxValue" />,
        ///     and different from <paramref name="oldValue" />.
        /// </returns>
        public static ushort UInt16(ushort oldValue, ushort minValue, ushort maxValue)
        {
            return UShort(oldValue, minValue, maxValue);
        }

        /// <summary>
        ///     Returns a
        ///     new random <see cref="T:DateTime" />,
        ///     different from <paramref name="oldValue" />,
        ///     within the range of 1 January 1995 to present day.
        /// </summary>
        /// <returns>
        ///     A
        ///     new random <see cref="T:DateTime" />,
        ///     different from <paramref name="oldValue" />,
        ///     within the range of 1 January 1995 to present day.
        /// </returns>
        public static DateTime DateTime(DateTime oldValue)
        {
            return DateTime(oldValue, new DateTime(1995, 1, 1), System.DateTime.Today);
        }

        /// <summary>
        ///     Returns a
        ///     random <see cref="T:DateTime" />,
        ///     different from <paramref name="oldValue" />,
        ///     within the date range defined by <paramref name="earliest" />
        ///     to <paramref name="latest" />.
        /// </summary>
        /// <returns>
        ///     A
        ///     new random <see cref="T:DateTime" />,
        ///     different from <paramref name="oldValue" />,
        ///     within the date range defined by <paramref name="earliest" />
        ///     to <paramref name="latest" />.
        /// </returns>
        public static DateTime DateTime(DateTime oldValue, DateTime earliest, DateTime latest)
        {
            return Rand.NewRandomDateTime(oldValue,earliest, latest);
        }

        /// <summary>
        ///     Returns a new random
        ///     alphanumeric <see cref="T:String" />,
        ///     different from <paramref name="oldValue" />,
        ///     but having the same length.
        /// </summary>
        /// <returns>
        ///     A new
        ///     alphanumeric <see cref="T:String" />,
        ///     different from <paramref name="oldValue" />,
        ///     but having the same length.
        /// </returns>
        public static string String(string oldValue)
        {
            return String(oldValue, Sets.AlphaNumeric);
        }
        
        /// <summary>
        ///     Returns a new random
        ///     <see cref="T:String" />,
        ///     different from <paramref name="oldValue" />,
        ///     but having the same length,
        ///     generated from the given set of characters.
        /// </summary>
        /// <returns>
        ///     A new
        ///     <see cref="T:String" />,
        ///     different from <paramref name="oldValue" />,
        ///     but having the same length,
        ///     generated from the given set of characters.
        /// </returns>
        public static string String(string oldValue, string characterSet)
        {
            return Rand.NewRandomString(oldValue, characterSet);
        }
        
        /// <summary>
        ///     Returns a new random
        ///     <see cref="T:Char" />,
        ///     different from <paramref name="oldValue" />,
        ///     from the <see cref="P:Cush.Testing.Sets.AtomChars"/> set.
        /// </summary>
        /// <returns>
        ///     A
        ///     <see cref="T:Char" />,
        ///     different from <paramref name="oldValue" />,
        ///     from the <see cref="P:Cush.Testing.Sets.AtomChars"/> set.
        /// </returns>
        public static char Char(char oldValue)
        {
            return Char(oldValue, Sets.AtomChars.ToCharArray());
        }

        /// <summary>
        ///     Returns a new random
        ///     <see cref="T:Char" />,
        ///     different from <paramref name="oldValue" />,
        ///     from the given character set.
        /// </summary>
        /// <returns>
        ///     A
        ///     <see cref="T:Char" />,
        ///     different from <paramref name="oldValue" />,
        ///     from the given character set.
        /// </returns>
        public static char Char(char oldValue, string characterSet)
        {
            return Char(oldValue, characterSet.ToCharArray());
        }

        /// <summary>
        ///     Returns a new random
        ///     <see cref="T:Char" />,
        ///     different from <paramref name="oldValue" />,
        ///     from the given character set.
        /// </summary>
        /// <returns>
        ///     A
        ///     <see cref="T:Char" />,
        ///     different from <paramref name="oldValue" />,
        ///     from the given character set.
        /// </returns>
        public static char Char(char oldValue, char[] characterSet)
        {
            return Rand.NewRandomChar(oldValue, characterSet);
        }

        /// <summary>
        ///     Returns a
        ///     new random <see cref="T:char[]" />,
        ///     different from <paramref name="oldCharArray" />
        ///     but having the same length,
        ///     where the elements are taken from the
        ///     <see cref="P:Cush.Testing.Sets.AtomChars" /> character set.
        /// </summary>
        /// <returns>
        ///     A
        ///     new random <see cref="T:char[]" />,
        ///     different from <paramref name="oldCharArray" />
        ///     but having the same length,
        ///     where the elements are taken from the
        ///     <see cref="P:Cush.Testing.Sets.AtomChars" /> character set.
        /// </returns>
        public static char[] CharArray(char[] oldCharArray)
        {
            return CharArray(oldCharArray, Sets.AtomChars);
        }

        /// <summary>
        ///     Returns a
        ///     new random <see cref="T:char[]" />,
        ///     different from <paramref name="oldCharArray" />
        ///     but having the same length,
        ///     where the elements are taken from the
        ///     given character set.
        /// </summary>
        /// <returns>
        ///     A
        ///     new random <see cref="T:char[]" />,
        ///     different from <paramref name="oldCharArray" />
        ///     but having the same length,
        ///     where the elements are taken from the
        ///     given character set.
        /// </returns>
        public static char[] CharArray(char[] oldCharArray, string characterSet)
        {
            return CharArray(oldCharArray, characterSet.ToCharArray());
        }

        /// <summary>
        ///     Returns a
        ///     new random <see cref="T:char[]" />,
        ///     different from <paramref name="oldCharArray" />
        ///     but having the same length,
        ///     where the elements are taken from the
        ///     given character set.
        /// </summary>
        /// <returns>
        ///     A
        ///     new random <see cref="T:char[]" />,
        ///     different from <paramref name="oldCharArray" />
        ///     but having the same length,
        ///     where the elements are taken from the
        ///     given character set.
        /// </returns>
        public static char[] CharArray(char[] oldCharArray, char[] characterSet)
        {
            return Rand.NewRandomCharArray(oldCharArray, characterSet);
        }
    }
}