using System;
using System.Linq;
using Microsoft.Win32;

namespace Cush.Testing.RandomObjects
{
    /// <summary>
    ///     Internally thread-safe class for obtaining new pseudo-random values, given a previous value, during (unit-)testing.
    /// </summary>
    public abstract class NewRandomObjectGenerator
    {
        #region Randomizing Methods
        /// <summary>
        ///     Returns a
        ///     new random <see cref="T:System.Exception" />,
        ///     generated by the <seealso cref="M:Cush.Testing.RandomObjectGenerator" />,
        ///     but different from <paramref name="oldException" />.
        /// </summary>
        /// <returns>
        ///     A
        ///     new random <see cref="T:System.Exception" />,
        ///     generated by the <seealso cref="M:Cush.Testing.RandomObjectGenerator" />,
        ///     but different from <paramref name="oldException" />.
        /// </returns>
        public abstract Exception NewRandomException(Exception oldException);

        /// <summary>
        ///     Returns a
        ///     new random <see cref="T:Microsoft.Win32.RegistryKey" />,
        ///     generated by the <seealso cref="M:Cush.Testing.RandomObjectGenerator" />,
        ///     but different from <paramref name="oldRegistryKey" />.
        /// </summary>
        /// <returns>
        ///     A
        ///     new random <see cref="T:Microsoft.Win32.RegistryKey" />,
        ///     generated by the <seealso cref="M:Cush.Testing.RandomObjectGenerator" />,
        ///     but different from <paramref name="oldRegistryKey" />.
        /// </returns>
        public abstract RegistryKey NewRandomRegistryKey(RegistryKey oldRegistryKey);

        /// <summary>
        ///     Returns a
        ///     random <see cref="T:DateTime" />,
        ///     different from <paramref name="oldValue" />,
        ///     within the date range defined by <paramref name="earliest" />
        ///     to <paramref name="latest" />.
        /// </summary>
        /// <returns>
        ///     A
        ///     new random <see cref="T:DateTime" />,
        ///     different from <paramref name="oldValue" />,
        ///     within the date range defined by <paramref name="earliest" />
        ///     to <paramref name="latest" />.
        /// </returns>
        public abstract DateTime NewRandomDateTime(DateTime oldValue, DateTime earliest, DateTime latest);

        /// <summary>
        ///     Returns a
        ///     new random <see cref="T:char[]" />,
        ///     different from <paramref name="oldCharArray" />
        ///     but having the same length,
        ///     where the elements are taken from the
        ///     given character set.
        /// </summary>
        /// <returns>
        ///     A
        ///     new random <see cref="T:char[]" />,
        ///     different from <paramref name="oldCharArray" />
        ///     but having the same length,
        ///     where the elements are taken from the
        ///     given character set.
        /// </returns>
        public abstract char[] NewRandomCharArray(char[] oldCharArray, char[] characterSet);

        /// <summary>
        ///     Returns a
        ///     new random 128-bit decimal number
        ///     greater than or equal to <paramref name="minValue" />,
        ///     strictly less than <paramref name="maxValue" />,
        ///     and different from <paramref name="oldValue" />,
        ///     using the given <see cref="T:Scale" />.
        /// </summary>
        /// <returns>
        ///     A
        ///     new random 128-bit decimal number
        ///     greater than or equal to <paramref name="minValue" />,
        ///     strictly less than <paramref name="maxValue" />,
        ///     and different from <paramref name="oldValue" />,
        ///     using the given <see cref="T:Scale" />.
        /// </returns>
        public abstract decimal NewRandomDecimal(decimal oldValue, decimal minValue, decimal maxValue, Scale scale);

        /// <summary>
        ///     Returns a
        ///     new random 64-bit floating-point number
        ///     greater than or equal to <paramref name="minValue" />,
        ///     strictly less than <paramref name="maxValue" />,
        ///     and different from <paramref name="oldValue" />,
        ///     using the given <see cref="T:Scale" />.
        /// </summary>
        /// <returns>
        ///     A
        ///     A 64-bit floating-point number
        ///     new random 64-bit floating-point number
        ///     greater than or equal to <paramref name="minValue" />,
        ///     strictly less than <paramref name="maxValue" />,
        ///     and different from <paramref name="oldValue" />,
        ///     using the given <see cref="T:Scale" />.
        /// </returns>
        public abstract double NewRandomDouble(double oldValue, double minValue, double maxValue, Scale scale);

        /// <summary>
        ///     Returns a new random
        ///     32-bit floating-point number
        ///     greater than or equal to <paramref name="minValue" />,
        ///     strictly less than <paramref name="maxValue" />,
        ///     and different from <paramref name="oldValue" />,
        ///     using the given <see cref="T:Scale" />.
        /// </summary>
        /// <returns>
        ///     A
        ///     32-bit floating-point number
        ///     greater than or equal to <paramref name="minValue" />,
        ///     strictly less than <paramref name="maxValue" />,
        ///     and different from <paramref name="oldValue" />,
        ///     using the given <see cref="T:Scale" />.
        /// </returns>
        public abstract float NewRandomFloat(float oldValue, float minValue, float maxValue, Scale scale);

        /// <summary>
        ///     Returns a new random
        ///     64-bit signed integer
        ///     greater than or equal to <paramref name="minValue" />,
        ///     strictly less than <paramref name="maxValue" />,
        ///     and different from <paramref name="oldValue" />,
        ///     using the given <see cref="T:Scale" />.
        /// </summary>
        /// <returns>
        ///     A
        ///     64-bit signed integer
        ///     greater than or equal to <paramref name="minValue" />,
        ///     strictly less than <paramref name="maxValue" />,
        ///     and different from <paramref name="oldValue" />,
        ///     using the given <see cref="T:Scale" />.
        /// </returns>
        public abstract long NewRandomLong(long oldValue, long minValue, long maxValue, Scale scale);

        /// <summary>
        ///     Returns a new random
        ///     16-bit signed integer
        ///     greater than or equal to <paramref name="minValue" />,
        ///     strictly less than <paramref name="maxValue" />,
        ///     and different from <paramref name="oldValue" />,
        ///     using the given <see cref="T:Scale" />.
        /// </summary>
        /// <returns>
        ///     A
        ///     16-bit signed integer
        ///     greater than or equal to <paramref name="minValue" />,
        ///     strictly less than <paramref name="maxValue" />,
        ///     and different from <paramref name="oldValue" />,
        ///     using the given <see cref="T:Scale" />.
        /// </returns>
        public abstract short NewRandomShort(short oldValue, short minValue, short maxValue, Scale scale);

        /// <summary>
        ///     Returns a new random
        ///     32-bit signed integer
        ///     greater than or equal to <paramref name="minValue" />,
        ///     strictly less than <paramref name="maxValue" />,
        ///     and different from <paramref name="oldValue" />,
        ///     using the given <see cref="T:Scale" />.
        /// </summary>
        /// <returns>
        ///     A
        ///     32-bit signed integer
        ///     greater than or equal to <paramref name="minValue" />,
        ///     strictly less than <paramref name="maxValue" />,
        ///     and different from <paramref name="oldValue" />,
        ///     using the given <see cref="T:Scale" />.
        /// </returns>
        public abstract int NewRandomInt(int oldValue, int minValue, int maxValue, Scale scale);

        /// <summary>
        ///     Returns a new random
        ///     <see cref="T:String" />,
        ///     different from <paramref name="oldValue" />,
        ///     but having the same length,
        ///     generated from the given set of characters.
        /// </summary>
        /// <returns>
        ///     A new
        ///     <see cref="T:String" />,
        ///     different from <paramref name="oldValue" />,
        ///     but having the same length,
        ///     generated from the given set of characters.
        /// </returns>
        public abstract string NewRandomString(string oldValue, string characterSet);

        /// <summary>
        ///     Returns a new random
        ///     <see cref="T:Char" />,
        ///     different from <paramref name="oldValue" />,
        ///     from the given character set.
        /// </summary>
        /// <returns>
        ///     A
        ///     <see cref="T:Char" />,
        ///     different from <paramref name="oldValue" />,
        ///     from the given character set.
        /// </returns>
        public abstract char NewRandomChar(char oldValue, char[] characterSet);

        /// <summary>
        ///     Returns a new random
        ///     unsigned 32-bit integer
        ///     greater than or equal to <paramref name="minValue" />,
        ///     strictly less than <paramref name="maxValue" />,
        ///     and different from <paramref name="oldValue" />.
        /// </summary>
        /// <returns>
        ///     A new random
        ///     unsigned 32-bit integer
        ///     greater than or equal to <paramref name="minValue" />,
        ///     strictly less than <paramref name="maxValue" />,
        ///     and different from <paramref name="oldValue" />.
        /// </returns>
        public abstract uint NewRandomUInt(uint oldValue, uint minValue, uint maxValue);

        /// <summary>
        ///     Returns a new random
        ///     unsigned 16-bit integer
        ///     greater than or equal to <paramref name="minValue" />,
        ///     strictly less than <paramref name="maxValue" />,
        ///     and different from <paramref name="oldValue" />.
        /// </summary>
        /// <returns>
        ///     A new random
        ///     unsigned 16-bit integer
        ///     greater than or equal to <paramref name="minValue" />,
        ///     strictly less than <paramref name="maxValue" />,
        ///     and different from <paramref name="oldValue" />.
        /// </returns>
        public abstract ushort NewRandomUShort(ushort oldValue, ushort minValue, ushort maxValue);

        /// <summary>
        ///     Returns a new random
        ///     unsigned 64-bit integer
        ///     greater than or equal to <paramref name="minValue" />,
        ///     strictly less than <paramref name="maxValue" />,
        ///     and different from <paramref name="oldValue" />.
        /// </summary>
        /// <returns>
        ///     A new random
        ///     unsigned 64-bit integer
        ///     greater than or equal to <paramref name="minValue" />,
        ///     strictly less than <paramref name="maxValue" />,
        ///     and different from <paramref name="oldValue" />.
        /// </returns>
        public abstract ulong NewRandomULong(ulong oldValue, ulong minValue, ulong maxValue);

        /// <summary>
        ///     Returns a new random
        ///     8-bit signed integer
        ///     greater than or equal to <paramref name="minValue" />,
        ///     strictly less than <paramref name="maxValue" />,
        ///     and different from <paramref name="oldValue" />.
        /// </summary>
        /// <returns>
        ///     A new random
        ///     8-bit signed integer
        ///     greater than or equal to <paramref name="minValue" />,
        ///     strictly less than <paramref name="maxValue" />,
        ///     and different from <paramref name="oldValue" />.
        /// </returns>
        public abstract sbyte NewRandomSByte(sbyte oldValue, sbyte minValue, sbyte maxValue);

        /// <summary>
        ///     Returns a new random
        ///     unsigned 8-bit integer
        ///     greater than or equal to <paramref name="minValue" />,
        ///     strictly less than <paramref name="maxValue" />,
        ///     and different from <paramref name="oldValue" />.
        /// </summary>
        /// <returns>
        ///     A new random
        ///     unsigned 8-bit integer
        ///     greater than or equal to <paramref name="minValue" />,
        ///     strictly less than <paramref name="maxValue" />,
        ///     and different from <paramref name="oldValue" />.
        /// </returns>
        public abstract byte NewRandomByte(byte oldValue, byte minValue, byte maxValue);

        #endregion

        private class NewROGImplementation : NewRandomObjectGenerator
        {
            public NewROGImplementation(RandomObjectGenerator rog)
            {
                _perThreadInstance = rog;
            }

            public override char NewRandomChar(char oldValue, char[] characterSet)
            {
                if (characterSet == null) throw new ArgumentException("Source character set cannot be null.");
                if (characterSet.Length == 1)
                    throw new ArgumentException("Source character set only has one character.");


                do
                {
                    var newValue = _perThreadInstance.GetRandomChar(characterSet);
                    if (newValue != oldValue) return newValue;
                } while (true);
            }

            public override string NewRandomString(string oldValue, string characterSet)
            {
                if (string.IsNullOrEmpty(characterSet))
                    throw new ArgumentException("Source character set cannot be null or empty.");

                if (string.IsNullOrEmpty(oldValue))
                    return _perThreadInstance.GetRandomString(2, 20, characterSet);

                var distinctCharsInSet = new string(characterSet.Distinct().ToArray());
                var distinctCharsInValue = new string(oldValue.Distinct().ToArray());

                if (distinctCharsInSet.Length < 2 && distinctCharsInValue == distinctCharsInSet)
                    throw new InvalidOperationException("Cannot create distinct string with given character set.");


                var newValue = _perThreadInstance.GetRandomString((uint)oldValue.Length, (uint)oldValue.Length,
                        characterSet);
                
                return newValue == oldValue ? NewRandomString(oldValue, characterSet) : newValue;
            }

            public override Exception NewRandomException(Exception oldException)
            {
                if (oldException == null) return _perThreadInstance.GetRandomException();

                do
                {
                    var newValue = _perThreadInstance.GetRandomException();
                    if (newValue.GetType() != oldException.GetType()) return newValue;
                } while (true);
            }

            public override DateTime NewRandomDateTime(DateTime oldValue, DateTime earliest, DateTime latest)
            {
                while (true)
                {
                    var newValue = _perThreadInstance.GetRandomDateTime(earliest, latest);

                    if (newValue == oldValue) continue;
                    return newValue;
                }
            }

            public override RegistryKey NewRandomRegistryKey(RegistryKey oldRegistryKey)
            {
                if (oldRegistryKey == null) return _perThreadInstance.GetRandomRegistryKey();
                do
                {
                    var newValue = _perThreadInstance.GetRandomRegistryKey();
                    if (newValue != oldRegistryKey) return newValue;
                } while (true);
            }

            public override byte NewRandomByte(byte oldValue, byte minValue, byte maxValue)
            {
                return GetNewUnscalableNumeric(oldValue, minValue, maxValue, _perThreadInstance.GetRandomByte);
            }

            public override double NewRandomDouble(double oldValue, double minValue, double maxValue, Scale scale)
            {
                return GetNewScalableNumeric(oldValue, minValue, maxValue, scale, _perThreadInstance.GetRandomDouble);
            }

            public override decimal NewRandomDecimal(decimal oldValue, decimal minValue, decimal maxValue, Scale scale)
            {
                return GetNewScalableNumeric(oldValue, minValue, maxValue, scale, _perThreadInstance.GetRandomDecimal);
            }

            public override float NewRandomFloat(float oldValue, float minValue, float maxValue, Scale scale)
            {
                return GetNewScalableNumeric(oldValue, minValue, maxValue, scale, _perThreadInstance.GetRandomFloat);
            }

            public override int NewRandomInt(int oldValue, int minValue, int maxValue, Scale scale)
            {
                return GetNewScalableNumeric(oldValue, minValue, maxValue, scale, _perThreadInstance.GetRandomInt);
            }

            public override long NewRandomLong(long oldValue, long minValue, long maxValue, Scale scale)
            {
                return GetNewScalableNumeric(oldValue, minValue, maxValue, scale, _perThreadInstance.GetRandomLong);
            }

            public override short NewRandomShort(short oldValue, short minValue, short maxValue, Scale scale)
            {
                return GetNewScalableNumeric(oldValue, minValue, maxValue, scale, _perThreadInstance.GetRandomShort);
            }

            public override uint NewRandomUInt(uint oldValue, uint minValue, uint maxValue)
            {
                return GetNewUnscalableNumeric(oldValue, minValue, maxValue, _perThreadInstance.GetRandomUInt);
            }

            public override ushort NewRandomUShort(ushort oldValue, ushort minValue, ushort maxValue)
            {
                return GetNewUnscalableNumeric(oldValue, minValue, maxValue, _perThreadInstance.GetRandomUShort);
            }

            public override ulong NewRandomULong(ulong oldValue, ulong minValue, ulong maxValue)
            {
                return GetNewUnscalableNumeric(oldValue, minValue, maxValue, _perThreadInstance.GetRandomULong);
            }

            public override sbyte NewRandomSByte(sbyte oldValue, sbyte minValue, sbyte maxValue)
            {
                return GetNewUnscalableNumeric(oldValue, minValue, maxValue, _perThreadInstance.GetRandomSByte);
            }

            public override char[] NewRandomCharArray(char[] oldArray, char[] elements)
            {
                do
                {
                    var newArray = _perThreadInstance.GetRandomCharArray((uint) oldArray.Length, (uint) oldArray.Length,
                        elements);
                    if (!oldArray.SequenceEqual(newArray)) return newArray;
                } while (true);
            }


            private T GetNewScalableNumeric<T>(T oldValue, T minValue, T maxValue, Scale scale, Func<T, T, Scale, T> func)
            {
                do
                {
                    var newValue = func.Invoke(minValue, maxValue, scale);
                    if (!newValue.Equals(oldValue)) return newValue;
                } while (true);
            }

            private T GetNewUnscalableNumeric<T>(T oldValue, T minValue, T maxValue, Func<T,T,T> func)
            {
                do
                {
                    var newValue = func.Invoke(minValue,maxValue);
                    if (!newValue.Equals(oldValue)) return newValue;
                } while (true);
            }
        }

        #region Special Methods

        static NewRandomObjectGenerator()
        {
            LockObject = new object();
        }

        [ThreadStatic] private static readonly object LockObject;

        [ThreadStatic] private static RandomObjectGenerator _perThreadInstance;

        /// <summary>
        ///     The per-thread <see cref="T:System.Random" /> pseudo-random number generator.
        /// </summary>
        public static RandomObjectGenerator PerThreadInstance
        {
            get
            {
                lock (LockObject)
                {
                    return _perThreadInstance ?? (_perThreadInstance = RandomObjectGenerator.GetInstance());
                }
            }
        }

        /// <summary>
        ///     Returns a new instance of the <seealso cref="RandomObjectGenerator" /> class.
        /// </summary>
        /// <returns>
        ///     A new instance of the <seealso cref="RandomObjectGenerator" /> class.
        /// </returns>
        public static NewRandomObjectGenerator GetInstance()
        {
            return new NewROGImplementation(RandomObjectGenerator.GetInstance());
        }

        #endregion
    }
}